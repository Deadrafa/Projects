import asyncio
import logging
import mysql.connector
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile
from aiogram import F
import sicret 
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from timeforem import formatted_date_day, proverka, formatted_date_moth
from keyboard import get_reply_keyboard_onOnehour, get_reply_keyboard_half_and_hour, get_reply_keyboard_half_hour, get_reply_keyboard_finish, get_reply_keyboard_finish1, get_reply_keyboard_finish2, get_reply_keyboard_MYSQL
from keyboard import get_keyboard
from data import mydate

listmain = []
user_list = []

boty = Bot(token=sicret.TOKEN)
dp = Dispatcher()

 #–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ input_list = []
price = FSInputFile('photo_2023-12-23_20-06-39.jpg')


priselist = [
           [types.KeyboardButton(text="–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞\n(–ù–æ–∂–Ω–∏—Ü—ã + –º–∞—à–∏–Ω–∫–∞)")],
           [types.KeyboardButton(text="–§—ç–π–¥\n(–ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å –Ω–æ–ª—è)")],
           [types.KeyboardButton(text="–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π\n(–û–¥–Ω–∞ –¥–≤–µ –Ω–∞—Å–∞–¥–∫–∏)")],
           [types.KeyboardButton(text="–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞\n(–î–æ 14 –ª–µ—Ç)")],
           [types.KeyboardButton(text="–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã")],
           [types.KeyboardButton(text="–ö–∞–º—É—Ñ–ª—è–∂ –≥–æ–ª–æ–≤—ã")],
           [types.KeyboardButton(text="–ö–∞–º—É—Ñ–ª—è–∂ –±–æ—Ä–æ–¥—ã")],
           [types.KeyboardButton(text="–ö–û–ú–ü–õ–ï–ö–° - –≥–æ–ª–æ–≤–∞+–±–æ—Ä–æ–¥–∞")]
    ]
PRlist = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=priselist)

@dp.message(CommandStart())
async def process_start_command(message: types.Message):
    kb = [
           [types.KeyboardButton(text="üìÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—ÉüìÖ")],
           [types.KeyboardButton(text="üí∞–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å price –ª–∏—Å—Çüí∞")],
           [types.KeyboardButton(text="üë®üèª‚Äçüíª–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏üë®üèª‚Äçüíª")]
    ]
    Keyboard = types.ReplyKeyboardMarkup(keyboard=kb,resize_keyboard=True)
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}üëã!")
    await message.answer(f"{message.from_user.first_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=Keyboard)

@dp.message(Command('id'))
async def id(message: types.Message):
    await message.reply(f'–í–∞—à id: {message.from_user.id}')
    await message.answer("–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", reply_markup=get_reply_keyboard_MYSQL())
    await boty.send_sticker(chat_id=message.from_user.id, sticker="CAACAgIAAxkBAAELM0Rlp6iGUcWpxewrrr4AAdxTDijtSkYAAiMAAygPahQnUSXnjCCkBjQE")

@dp.message(Command('—á–∞—Ç'))
async def get_chat_id(message: types.Message):
    chat_id = message.chat.id
    await message.reply(f"ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞: {chat_id}")


@dp.message(F.text == "üí∞–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å price –ª–∏—Å—Çüí∞")
async def photo(message: types.Message):
       await boty.send_photo(chat_id=message.from_user.id, photo=price)

@dp.message(F.text =="üìÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—ÉüìÖ")
async def yslyga(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É",
        reply_markup=get_keyboard()
    )

@dp.callback_query(F.data == "strilka_def")
async def call_yslyga1(callback: types.CallbackQuery):
    listmain.clear()
    builder = ReplyKeyboardBuilder()
    for i in range(int(formatted_date_day), (proverka(formatted_date_moth ) + 1)):
        builder.add(types.KeyboardButton(text=str(i)))
        poteranaia_I = i
        listmain.append(poteranaia_I)
    listmain.append("–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞")
    user_list.clear()
    user_list.append("–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞")
    print(listmain)
    print(user_list)
    builder.adjust(7)
    await callback.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ {mydate.strftime("%B")}:',
          reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.callback_query(F.data == "feid")
async def call_feid(callback: types.CallbackQuery):
    listmain.clear()
    builder = ReplyKeyboardBuilder()
    for i in range(int(formatted_date_day), (proverka(formatted_date_moth ) + 1)):
        builder.add(types.KeyboardButton(text=str(i)))
        poteranaia_I = i
        listmain.append(poteranaia_I)
    listmain.append("–§—ç–π–¥")
    user_list.clear()
    user_list.append("–§—ç–π–¥")
    print(listmain)
    print(user_list) 
    builder.adjust(7)
    await callback.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ {mydate.strftime("%B")}:',
          reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.callback_query(F.data == "ctrijkaMashinkoi")
async def call_yslyga2(callback: types.CallbackQuery):
    listmain.clear()
    builder = ReplyKeyboardBuilder()
    for i in range(int(formatted_date_day), (proverka(formatted_date_moth ) + 1)):
        builder.add(types.KeyboardButton(text=str(i)))
        poteranaia_I = i
        listmain.append(poteranaia_I)
    listmain.append("–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π")
    user_list.clear()
    user_list.append("–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π")
    print(listmain)
    print(user_list) 
    builder.adjust(7)
    await callback.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ {mydate.strftime("%B")}:',
          reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.callback_query(F.data == "kids_strichka")
async def call_yslyga4(callback: types.CallbackQuery):
    listmain.clear()
    builder = ReplyKeyboardBuilder()
    for i in range(int(formatted_date_day), (proverka(formatted_date_moth ) + 1)):
        builder.add(types.KeyboardButton(text=str(i)))
        poteranaia_I = i
        listmain.append(poteranaia_I)
    listmain.append("–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞\n(–î–æ 14 –ª–µ—Ç)")
    user_list.clear()
    user_list.append("–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞")
    print(listmain)
    print(user_list) 
    builder.adjust(7)
    await callback.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ {mydate.strftime("%B")}:',
          reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.callback_query(F.data == "boroda_strich")
async def call_yslyga5(callback: types.CallbackQuery):
    listmain.clear()
    builder = ReplyKeyboardBuilder()
    for i in range(int(formatted_date_day), (proverka(formatted_date_moth ) + 1)):
        builder.add(types.KeyboardButton(text=str(i)))
        poteranaia_I = i
        listmain.append(poteranaia_I)
    listmain.append("–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã")
    user_list.clear()
    user_list.append("–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã")
    print(listmain)
    print(user_list) 
    builder.adjust(7)
    await callback.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ {mydate.strftime("%B")}:',
          reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.callback_query(F.data == "golova_kamyflij")
async def call_yslyga6(callback: types.CallbackQuery):
    listmain.clear()
    builder = ReplyKeyboardBuilder()
    for i in range(int(formatted_date_day), (proverka(formatted_date_moth ) + 1)):
        builder.add(types.KeyboardButton(text=str(i)))
        poteranaia_I = i
        listmain.append(poteranaia_I)
    listmain.append("–ö–∞–º—É—Ñ–ª—è–∂ –≥–æ–ª–æ–≤—ã")
    user_list.clear()
    user_list.append("–ö–∞–º—É—Ñ–ª—è–∂ –≥–æ–ª–æ–≤—ã")
    print(listmain)
    print(user_list) 
    builder.adjust(7)
    await callback.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ {mydate.strftime("%B")}:',
          reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.callback_query(F.data == "boroda_kamyflij")
async def call_yslyga7(callback: types.CallbackQuery):
    listmain.clear()
    builder = ReplyKeyboardBuilder()
    for i in range(int(formatted_date_day), (proverka(formatted_date_moth ) + 1)):
        builder.add(types.KeyboardButton(text=str(i)))
        poteranaia_I = i
        listmain.append(poteranaia_I)
    listmain.append("–ö–∞–º—É—Ñ–ª—è–∂ –±–æ—Ä–æ–¥—ã")
    user_list.clear()
    user_list.append("–ö–∞–º—É—Ñ–ª—è–∂ –±–æ—Ä–æ–¥—ã")
    print(listmain)
    print(user_list) 
    builder.adjust(7)
    await callback.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ {mydate.strftime("%B")}:',
          reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.callback_query(F.data == "Kompleksiks")
async def call_yslyga8(callback: types.CallbackQuery):
    listmain.clear()
    builder = ReplyKeyboardBuilder()
    for i in range(int(formatted_date_day), (proverka(formatted_date_moth) + 1)):
        builder.add(types.KeyboardButton(text=str(i)))
        poteranaia_I = i
        listmain.append(poteranaia_I)
    listmain.append("–ö–û–ú–ü–õ–ï–ö–° - –≥–æ–ª–æ–≤–∞+–±–æ—Ä–æ–¥–∞")
    user_list.clear()
    user_list.append("–ö–û–ú–ü–õ–ï–ö–° - –≥–æ–ª–æ–≤–∞+–±–æ—Ä–æ–¥–∞")
    print(listmain)
    print(user_list) 
    builder.adjust(7)
    await callback.message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ {mydate.strftime("%B")}:',
          reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.message(lambda message: any(str(day) in message.text for day in listmain))
async def time(message: types.Message):
    user_list.append(message.text)
    print(user_list)
    if("–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞" == listmain[-1] or "–§—ç–π–¥" == listmain[-1] or "–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞\n(–î–æ 14 –ª–µ—Ç)" == listmain[-1] in listmain):
       await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤ —á–∞—Å:', reply_markup=get_reply_keyboard_onOnehour())
       listmain.clear()
    if("–ö–û–ú–ü–õ–ï–ö–° - –≥–æ–ª–æ–≤–∞+–±–æ—Ä–æ–¥–∞" == listmain[-1] in listmain):
       await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞:', reply_markup=get_reply_keyboard_half_and_hour())
       listmain.clear()
    if("–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π" == listmain[-1] or "–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã" == listmain[-1] or "–ö–∞–º—É—Ñ–ª—è–∂ –≥–æ–ª–æ–≤—ã" == listmain[-1] or "–ö–∞–º—É—Ñ–ª—è–∂ –±–æ—Ä–æ–¥—ã" == listmain[-1] in listmain):
       await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤ –ø–æ–ª —á–∞—Å–∞', reply_markup=get_reply_keyboard_half_hour())
       listmain.clear()


@dp.callback_query(F.data == "Registr_users")
async def call_finish(callback: types.CallbackQuery):
    db = mysql.connector.connect(
        host='localhost',
        port=3306,
        user='root',
        password='root',
        db='client'
    )
    cursor = db.cursor()
    cursor.execute("SELECT name, user_id FROM people")
    result = cursor.fetchall()
    people_list = [f'{callback.from_user.first_name}', int(f'{callback.from_user.id}')]
    print(people_list)
    for row in result:
        row = list(row)
        print(row)
        if(row == people_list):
            await callback.message.answer("üò°–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüò°")
            break
    if(row != people_list):
        sql = "INSERT INTO people (name, user_id) VALUES (%s, %s)"
        val = (f'{callback.from_user.first_name}', f'{callback.from_user.id}')
        mylist = list(val)
        cursor.execute(sql, mylist)
        db.commit()
        print(cursor.rowcount, "–∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        await callback.message.answer("‚úÖ–Ø –≤–∞—Å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª‚úÖ")

@dp.callback_query(F.data == "10:00 - 11:00")
async def call_finish(callback: types.CallbackQuery):
    await callback.message.answer("‚úÖ–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è‚úÖ", reply_markup=get_reply_keyboard_finish())

@dp.callback_query(F.data == "11:00 - 12:00")
async def call_finish(callback: types.CallbackQuery):
    await callback.message.answer("‚úÖ–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è‚úÖ", reply_markup=get_reply_keyboard_finish1())

@dp.callback_query(F.data == "12:00 - 13:00")
async def call_finish(callback: types.CallbackQuery):
    await callback.message.answer("‚úÖ–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è‚úÖ", reply_markup=get_reply_keyboard_finish2())
    
@dp.callback_query(F.data == "finish_reg")
async def finish(callback: types.CallbackQuery):
    await boty.send_message(chat_id=sicret.admin_id, text= f'–ó–∞–ø–∏—Å—å:\n–ò–º—è: {callback.from_user.first_name}\n–£—Å–ª—É–≥–∞: {user_list[0]}\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {user_list[-1]} {mydate.strftime("%B")}\n–í—Ä–µ–º—è: (10:00 - 11:00)')
    await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ãüòá\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º")
    user_list.clear() #–ù–µ –∑–∞–±—É–¥—å –ø–æ—á–∏—Å—Ç–∏—Ç—å user_list —Å –ø–æ–º–æ—à—å—é user_list.clear()

@dp.callback_query(F.data == "finish_reg1")
async def finish(callback: types.CallbackQuery):
    await boty.send_message(chat_id=sicret.admin_id, text= f'–ó–∞–ø–∏—Å—å:\n–ò–º—è: {callback.from_user.first_name}\n–£—Å–ª—É–≥–∞: {user_list[0]}\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {user_list[-1]} {mydate.strftime("%B")}\n–í—Ä–µ–º—è: (11:00 - 12:00)')
    await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ãüòá\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º")
    user_list.clear() #–ù–µ –∑–∞–±—É–¥—å –ø–æ—á–∏—Å—Ç–∏—Ç—å user_list —Å –ø–æ–º–æ—à—å—é user_list.clear()

@dp.callback_query(F.data == "finish_reg2")
async def finish(callback: types.CallbackQuery):
    await boty.send_message(chat_id=sicret.admin_id, text= f'–ó–∞–ø–∏—Å—å:\n–ò–º—è: {callback.from_user.first_name}\n–£—Å–ª—É–≥–∞: {user_list[0]}\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {user_list[-1]} {mydate.strftime("%B")}\n–í—Ä–µ–º—è: (12:00 - 13:00)')
    await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ãüòá\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º")
    user_list.clear() #–ù–µ –∑–∞–±—É–¥—å –ø–æ—á–∏—Å—Ç–∏—Ç—å user_list —Å –ø–æ–º–æ—à—å—é user_list.clear()


async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    logging.basicConfig(level=logging.INFO)
    # And the run events dispatching
    await dp.start_polling(boty, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
	print("start")
	asyncio.run(main())